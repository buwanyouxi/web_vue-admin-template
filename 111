<template>
  <div>
    <el-container>
      <el-main>
        <!-- 主体 -->

        <!-- 插入一个表单 新建一个销售单 -->
        <el-button @click="openInsertDialog" type="primary"
          >新建销售单</el-button
        >
        <el-dialog title="新建/编辑销售单" :visible.sync="insertDialogVisible">
          <el-form :model="currentSalesOrder">
            <el-form-item label="顾客" label-width="40px">
              <el-input
                v-model="currentSalesOrder.customer"
                placeholder="顾客名称"
              ></el-input>
            </el-form-item>
            <el-form-item label="货品">
              <el-select v-model="currentProduct" placeholder="选择货品">
                <el-option
                  v-for="product in products"
                  :key="product.id"
                  :label="product.name"
                  :value="product.id"
                ></el-option>
              </el-select>
              <el-input
                v-model="currentQuantity"
                placeholder="输入数量"
                type="number"
                min="1"
              ></el-input>
              <el-button @click="addProductToOrder">添加到销售单</el-button>
            </el-form-item>
            <el-table :data="currentSalesOrder.items">
              <el-table-column prop="name" label="货品名称"></el-table-column>
              <el-table-column prop="num" label="数量"></el-table-column>
            </el-table>
          </el-form>
          <span slot="footer" class="dialog-footer">
            <el-button @click="insertDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="saveSalesOrder">保存</el-button>
            <el-button type="primary" @click="submitSalesOrder">提交</el-button>
          </span>
        </el-dialog>

        <!-- 审核对话框 -->
        <el-dialog title="审核销售单" :visible.sync="auditDialogVisible">
          <span>是否通过审核？</span>
          <span slot="footer" class="dialog-footer">
            <el-button @click="auditDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="approveSalesOrder"
              >通过</el-button
            >
          </span>
        </el-dialog>

        <!-- 显示已有的销售单 -->
        <el-table :data="tableData" stripe border style="width: 100%">
          <el-table-column
            prop="id"
            label="序号"
            width="180px"
          ></el-table-column>
          <el-table-column prop="flag" label="状态"></el-table-column>
          <el-table-column prop="customer" label="顾客"></el-table-column>
          <el-table-column label="操作">
            <template slot-scope="scope">
              <el-button
                v-if="scope.row.flag === 'draft'"
                @click="editSalesOrder(scope.row.id)"
                >修改销售单</el-button
              >
              <el-button
                v-if="scope.row.flag === 'draft'"
                @click="openDeleteDialog(scope.row.id)"
                type="text"
                >删除</el-button
              >
              <el-button
                v-if="scope.row.flag === 'submitted'"
                @click="openAuditDialog(scope.row.id)"
                type="text"
                >审核</el-button
              >
              <el-button
                v-if="scope.row.flag === 'approved'"
                @click="receiptSalesOrder(scope.row.id)"
                type="text"
                >收款</el-button
              >
              <el-button
                v-if="scope.row.flag === 'approved'"
                @click="refundSalesOrder(scope.row.id)"
                type="text"
                >退货</el-button
              >
            </template>
          </el-table-column>
        </el-table>

        <!-- 删除确认对话框 -->
        <el-dialog
          title="提示"
          :visible.sync="deleteDialogVisible"
          width="30%"
          :before-close="handleClose"
        >
          <span>是否删除该销售单</span>
          <span slot="footer" class="dialog-footer">
            <el-button @click="deleteDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="confirmDelete">确定</el-button>
          </span>
        </el-dialog>

        <el-pagination
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
          :current-page.sync="page"
          :page-sizes="pageSizes"
          :page-size="pageSize"
          layout="total, sizes, prev, pager, next, jumper"
          :total="total"
        ></el-pagination>
      </el-main>
    </el-container>
  </div>
</template>

<script>
import axios from "axios";

export default {
  data() {
    return {
      page: 1,
      pageSize: 5,
      pageSizes: [5, 10, 15],
      total: 0,
      deleteDialogVisible: false,
      insertDialogVisible: false,
      auditDialogVisible: false,
      deleteSalesOrderId: null,
      auditSalesOrderId: null,

      products: [],
      tableData: [],
      currentSalesOrder: {
        items: [],
        flag: "draft",
        customer: "",
      },
      currentProduct: null,
      currentQuantity: 1,
    };
  },
  methods: {
    // 新增功能中用于获取目前的货品信息
    fetchProducts() {
      axios.get("http://10.241.72.90:8080/goods/all").then((response) => {
        this.products = response.data.data;
        console.log(response);
      }).catch(()=>{
        console.log("fetchProducts错误");
      });
    },
    //已有销售单的数据获取
    fetchSalesOrders() {
      axios
        .get("http://10.241.72.90:8080/bill/search", {
          params: {
            page: this.page,
            pageSize: this.pageSize,
          },
        })
        .then((response) => {
          console.log(response);
          this.tableData = response.data.data.rows;
          this.total = response.data.data.total;
        }).catch(()=>{
          console.log("fetchSalesOrder错误");
        })
    },
    //打开插入表（销售单的初始状态设为"draft"）
    openInsertDialog() {
      this.insertDialogVisible = true;
      this.currentSalesOrder = { items: [], flag: "draft", customer: "" };
      this.currentProduct = null;
      this.currentQuantity = 1;
    },
    //添加产品到销售单中
    addProductToOrder() {
      if (this.currentProduct && this.currentQuantity > 0) {
        const product = this.products.find((p) => p.id === this.currentProduct);
        this.currentSalesOrder.items.push({
          id: this.currentProduct,
          name: product.name,
          num: this.currentQuantity,
        });
        this.currentProduct = null;
        this.currentQuantity = 1;
      }
    },
    //保存草稿功能
    saveSalesOrder() {
  if (this.currentSalesOrder.items.length > 0) {
    // 转换 currentSalesOrder.items 中的 name 为 goods
    const transformedItems = this.currentSalesOrder.items.map(item => {
      const product = this.products.find(p => p.name === item.name);
      return {
        goods: product ? product.id : null, // 如果找不到商品则设置为 null 或其他合适的值
        num: item.num
      };
    });

    // 创建一个新的对象来保存转换后的数据
    const transformedSalesOrder = {
      ...this.currentSalesOrder,
      items: transformedItems
    };
    console.log(transformedSalesOrder);
    // 发送请求保存销售单
    axios
      .post("http://10.241.72.90:8080/bill", transformedSalesOrder)
      .then(() => {
        this.fetchSalesOrders();
        this.insertDialogVisible = false;
      });
    
    // 发送请求保存销售单项
    axios
      .post("http://10.241.72.90:8080/billLog", transformedSalesOrder)
      .then(() => {
        this.fetchSalesOrders();
        this.insertDialogVisible = false;
      });
  }
},
    // 提交功能
    submitSalesOrder() {
      if (this.currentSalesOrder.items.length > 0) {
        this.currentSalesOrder.flag = "submitted";
        axios
          .post("http://10.241.72.90:8080/bill", this.currentSalesOrder)
          .then(() => {
            this.fetchSalesOrders();
            this.insertDialogVisible = false;
          });
      }
    },

   editSalesOrder(salesOrderId) {
  console.log(salesOrderId);

  axios
    .get(`http://10.241.72.90:8080/billLog/bill`, {
      params: {
        bill: salesOrderId
      }
    })
    .then((response) => {
      // 获取返回的销售单项数据
      const items = response.data.data;
      this.currentSalesOrder.items = items.map((item) => {
        // 根据 goods ID 找到对应的 product
        const product = this.products.find(p => p.id === item.goods);
        return {
          name: product ? product.name : "未知商品", // 如果找不到商品则显示 "未知商品"
          num: item.num
        };
      });
      
      this.insertDialogVisible = true;
      this.currentProduct = null;
      this.currentQuantity = 1;
    })
    .catch((error) => {
      console.error("获取销售单项数据失败：", error);
      this.$message.error("获取销售单项数据失败");
    });
},
    openDeleteDialog(id) {
      this.deleteSalesOrderId = id;
      this.deleteDialogVisible = true;
    },
    confirmDelete() {
      if (this.deleteSalesOrderId !== null) {
        axios
          .delete(`http://10.241.72.90:8080/bill/`+this.deleteSalesOrderId)
          .then(() => {
            this.fetchSalesOrders();
            this.deleteDialogVisible = false;
          });
      }
    },
    openAuditDialog(id) {
      this.auditSalesOrderId = id;
      this.auditDialogVisible = true;
    },
    approveSalesOrder() {
      if (this.auditSalesOrderId !== null) {
        axios
          .post(
            `http://10.241.72.90:8080/bill/${this.auditSalesOrderId}/approve`
          )
          .then(() => {
            // 审核通过后获取最新库存数据
            axios
              .get("http://10.241.72.90:8080/inventory")
              .then((response) => {
                const inventoryData = response.data;
                // 根据销售单中的数据计算需要扣除的库存量
                const salesOrder = this.tableData.find(
                  (order) => order.id === this.auditSalesOrderId
                );
                const inventoryToUpdate = {};
                salesOrder.items.forEach((item) => {
                  const productId = item.id;
                  const num = item.num;
                  if (inventoryData[productId]) {
                    inventoryToUpdate[productId] =
                      inventoryData[productId] - num;
                  }
                });

                // 提交更新后的库存数据给后端
                axios
                  .post(
                    "http://10.241.72.90:8080/inventory/update",
                    inventoryToUpdate
                  )
                  .then(() => {
                    // 更新成功，关闭审核对话框并刷新销售单列表
                    this.fetchSalesOrders();
                    this.auditDialogVisible = false;
                  })
                  .catch((error) => {
                    console.error("更新库存失败：", error);
                    // 更新库存失败的处理逻辑
                  });
              })
              .catch((error) => {
                console.error("获取库存数据失败：", error);
                // 获取库存数据失败的处理逻辑
              });
          });
      }
    },
    receiptSalesOrder(id) {
      axios.post(`http://10.241.72.90:8080/bill/${id}/receipt`).then(() => {
        this.fetchSalesOrders();
      });
    },
    refundSalesOrder(id) {
      axios.post(`http://10.241.72.90:8080/bill/${id}/refund`).then(() => {
        this.fetchSalesOrders();
      });
    },
    handleSizeChange(val) {
      this.pageSize = val;
      this.fetchSalesOrders();
    },
    handleCurrentChange(val) {
      this.page = val;
      this.fetchSalesOrders();
    },
  },
  mounted() {
    this.fetchProducts();
    this.fetchSalesOrders();
  },
};
</script>

<style scoped>
.sales-management {
  padding: 20px;
}

.sales-management h1 {
  margin-bottom: 20px;
}
</style>
